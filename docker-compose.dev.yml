version: '3.8'

services:
  reservation-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: reservation-api-dev
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - AWS_REGION=ap-northeast-2
      - DYNAMODB_ENDPOINT=http://dynamodb-local:8000
      - EVENTBRIDGE_ENDPOINT=http://localstack:4566
      - INVENTORY_GRPC_ADDRESS=inventory-service:9090
      - JWT_ISSUER_URI=http://keycloak:8080/auth/realms/traffic-tacos
      - OTLP_ENDPOINT=http://otel-collector:4318/v1/metrics
      - LOGGING_LEVEL_COM_TRAFFICTACOS_RESERVATION=DEBUG
    volumes:
      - ./logs:/app/logs
    depends_on:
      - dynamodb-local
      - localstack
    networks:
      - traffic-tacos
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  dynamodb-local:
    image: amazon/dynamodb-local:latest
    container_name: dynamodb-local-dev
    ports:
      - "8000:8000"
    volumes:
      - dynamodb_data:/home/dynamodblocal/data
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath /home/dynamodblocal/data"
    networks:
      - traffic-tacos
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/shell/"]
      interval: 30s
      timeout: 10s
      retries: 5

  localstack:
    image: localstack/localstack:3.0
    container_name: localstack-dev
    ports:
      - "4566:4566"
    environment:
      - SERVICES=lambda,dynamodb,events,iam,logs
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - localstack_data:/tmp/localstack
      - ./localstack-init:/etc/localstack/init/ready.d
    networks:
      - traffic-tacos
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: otel-collector-dev
    ports:
      - "4317:4317"   # gRPC receiver
      - "4318:4318"   # HTTP receiver
      - "55679:55679" # zpages
    volumes:
      - ./otel-collector-config.yml:/etc/otelcol/config.yaml
    command: ["--config", "/etc/otelcol/config.yaml"]
    networks:
      - traffic-tacos
    depends_on:
      - jaeger

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger-dev
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - traffic-tacos

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - traffic-tacos

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-dev
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - traffic-tacos
    depends_on:
      - prometheus

  # Mock inventory service for development
  inventory-service:
    image: grpcui/grpcui:latest
    container_name: inventory-service-dev
    ports:
      - "9090:9090"
    command: ["grpcui", "-bind", "0.0.0.0", "-port", "9090", "-plaintext", "mock-inventory:9090"]
    networks:
      - traffic-tacos
    depends_on:
      - mock-inventory

  mock-inventory:
    image: bufbuild/buf:latest
    container_name: mock-inventory-dev
    command: ["grpc-server", "--bind", "0.0.0.0:9090", "--proto-path", "/proto", "/proto/inventory.proto"]
    volumes:
      - ./src/main/proto:/proto
    networks:
      - traffic-tacos

volumes:
  dynamodb_data:
  localstack_data:
  prometheus_data:
  grafana_data:

networks:
  traffic-tacos:
    driver: bridge
