syntax = "proto3";

package reservation.v1;

option java_package = "com.traffictacos.reservation.v1";
option java_multiple_files = true;
option java_outer_classname = "InventoryProto";
option go_package = "github.com/traffic-tacos/proto-contracts/gen/go/reservation/v1;reservationv1";

// Inventory service for managing seat availability and zero oversell control
service InventoryService {
  // Check seat availability for an event
  rpc CheckAvailability(CheckAvailabilityRequest) returns (CheckAvailabilityResponse);

  // Hold seats for a reservation (60-second hold mechanism)
  rpc HoldSeats(HoldSeatsRequest) returns (HoldSeatsResponse);

  // Commit a reservation (finalize seat allocation)
  rpc CommitReservation(CommitReservationRequest) returns (CommitReservationResponse);

  // Release a hold on seats
  rpc ReleaseHold(ReleaseHoldRequest) returns (ReleaseHoldResponse);
}

// Common error codes for inventory operations
enum ErrorCode {
  ERROR_CODE_UNSPECIFIED = 0;
  ERROR_CODE_INVALID_REQUEST = 1;
  ERROR_CODE_EVENT_NOT_FOUND = 2;
  ERROR_CODE_SEATS_UNAVAILABLE = 3;
  ERROR_CODE_HOLD_EXPIRED = 4;
  ERROR_CODE_RESERVATION_NOT_FOUND = 5;
  ERROR_CODE_PAYMENT_REQUIRED = 6;
  ERROR_CODE_INTERNAL_ERROR = 7;
}

// Common error detail
message ErrorDetail {
  string field = 1;
  string message = 2;
}

// Common error response
message Error {
  ErrorCode code = 1;
  string message = 2;
  string trace_id = 3;
  repeated ErrorDetail details = 4;
}

// Check availability request
message CheckAvailabilityRequest {
  string event_id = 1;
  int32 quantity = 2;
  repeated string seat_ids = 3; // Optional: specific seats requested
  string user_id = 4; // For rate limiting and analytics
}

// Check availability response
message CheckAvailabilityResponse {
  bool available = 1;
  repeated string available_seat_ids = 2;
  string message = 3;
  Error error = 4; // Present if available = false
  int32 total_available = 5; // Total seats available for the event
}

// Hold seats request (60-second hold mechanism)
message HoldSeatsRequest {
  string event_id = 1;
  repeated string seat_ids = 2;
  int32 quantity = 3;
  string reservation_id = 4;
  string user_id = 5;
  int32 hold_duration_seconds = 6; // Default 60 seconds
}

// Hold seats response
message HoldSeatsResponse {
  bool success = 1;
  repeated string held_seat_ids = 2;
  string hold_token = 3; // Token to identify the hold
  int64 expires_at = 4; // Unix timestamp when hold expires
  string message = 5;
  Error error = 6; // Present if success = false
}

// Commit reservation request
message CommitReservationRequest {
  string reservation_id = 1;
  string event_id = 2;
  repeated string seat_ids = 3;
  int32 quantity = 4;
  string payment_intent_id = 5;
  string hold_token = 6; // Token from HoldSeats response
  string user_id = 7;
}

// Commit reservation response
message CommitReservationResponse {
  bool success = 1;
  string message = 2;
  repeated string confirmed_seat_ids = 3;
  Error error = 4; // Present if success = false
  string confirmation_id = 5; // Unique confirmation identifier
}

// Release hold request
message ReleaseHoldRequest {
  string reservation_id = 1;
  string event_id = 2;
  repeated string seat_ids = 3;
  int32 quantity = 4;
  string hold_token = 5; // Token from HoldSeats response
  string user_id = 6;
}

// Release hold response
message ReleaseHoldResponse {
  bool success = 1;
  string message = 2;
  repeated string released_seat_ids = 3;
  Error error = 4; // Present if success = false
}