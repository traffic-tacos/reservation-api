openapi: 3.0.3
info:
  title: Traffic Tacos Reservation API
  description: High-performance ticket reservation service for Traffic Tacos platform
  version: 1.0.0
  contact:
    name: Traffic Tacos Development Team
    email: dev@traffictacos.com

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://api.traffictacos.com
    description: Production server

security:
  - bearerAuth: []

paths:
  /v1/reservations:
    post:
      summary: Create a new reservation
      description: Create a reservation with seat hold for the specified event
      operationId: createReservation
      tags:
        - Reservations
      security:
        - bearerAuth: []
      parameters:
        - name: Idempotency-Key
          in: header
          required: true
          schema:
            type: string
            format: uuid
          description: Unique identifier for request idempotency
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReservationRequest'
      responses:
        '201':
          description: Reservation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateReservationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/RateLimited'

  /v1/reservations/{reservationId}/confirm:
    post:
      summary: Confirm a reservation
      description: Confirm the reservation and complete the payment process
      operationId: confirmReservation
      tags:
        - Reservations
      security:
        - bearerAuth: []
      parameters:
        - name: reservationId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the reservation
        - name: Idempotency-Key
          in: header
          required: true
          schema:
            type: string
            format: uuid
          description: Unique identifier for request idempotency
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmReservationRequest'
      responses:
        '200':
          description: Reservation confirmed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmReservationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'

  /v1/reservations/{reservationId}/cancel:
    post:
      summary: Cancel a reservation
      description: Cancel the reservation and release the seat hold
      operationId: cancelReservation
      tags:
        - Reservations
      security:
        - bearerAuth: []
      parameters:
        - name: reservationId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the reservation
        - name: Idempotency-Key
          in: header
          required: true
          schema:
            type: string
            format: uuid
          description: Unique identifier for request idempotency
      responses:
        '200':
          description: Reservation cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelReservationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'

  /v1/reservations/{reservationId}:
    get:
      summary: Get reservation details
      description: Retrieve detailed information about a specific reservation
      operationId: getReservation
      tags:
        - Reservations
      security:
        - bearerAuth: []
      parameters:
        - name: reservationId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the reservation
      responses:
        '200':
          description: Reservation details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Authorization header using the Bearer scheme

  schemas:
    CreateReservationRequest:
      type: object
      required:
        - event_id
        - qty
        - seat_ids
        - user_id
        - reservation_token
      properties:
        event_id:
          type: string
          description: Unique identifier of the event
          example: "evt_2025_1001"
        qty:
          type: integer
          minimum: 1
          maximum: 10
          description: Number of seats to reserve
          example: 2
        seat_ids:
          type: array
          items:
            type: string
          description: List of seat identifiers
          example: ["A-12", "A-13"]
        user_id:
          type: string
          description: Unique identifier of the user
          example: "u123"
        reservation_token:
          type: string
          description: Reservation token from queue system
          example: "rtkn_xyz789"

    CreateReservationResponse:
      type: object
      required:
        - reservation_id
        - hold_expires_at
      properties:
        reservation_id:
          type: string
          description: Unique identifier of the created reservation
          example: "rsv_abc123"
        hold_expires_at:
          type: string
          format: date-time
          description: Timestamp when the seat hold expires
          example: "2024-01-01T12:05:00Z"

    ConfirmReservationRequest:
      type: object
      required:
        - reservation_id
        - payment_intent_id
      properties:
        reservation_id:
          type: string
          description: Unique identifier of the reservation
          example: "rsv_abc123"
        payment_intent_id:
          type: string
          description: Payment intent identifier from payment service
          example: "pay_xyz789"

    ConfirmReservationResponse:
      type: object
      required:
        - order_id
        - status
      properties:
        order_id:
          type: string
          description: Unique identifier of the created order
          example: "ord_xyz789"
        status:
          type: string
          enum: [CONFIRMED]
          description: Status of the reservation confirmation
          example: "CONFIRMED"

    CancelReservationResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [CANCELLED]
          description: Status of the reservation cancellation
          example: "CANCELLED"

    ReservationResponse:
      type: object
      required:
        - reservation_id
        - event_id
        - user_id
        - qty
        - seat_ids
        - status
        - created_at
        - updated_at
      properties:
        reservation_id:
          type: string
          description: Unique identifier of the reservation
          example: "rsv_abc123"
        event_id:
          type: string
          description: Unique identifier of the event
          example: "evt_2025_1001"
        user_id:
          type: string
          description: Unique identifier of the user
          example: "u123"
        qty:
          type: integer
          description: Number of seats reserved
          example: 2
        seat_ids:
          type: array
          items:
            type: string
          description: List of reserved seat identifiers
          example: ["A-12", "A-13"]
        status:
          type: string
          enum: [HOLD, CONFIRMED, CANCELLED, EXPIRED]
          description: Current status of the reservation
          example: "HOLD"
        hold_expires_at:
          type: string
          format: date-time
          description: Timestamp when the seat hold expires (only for HOLD status)
          example: "2024-01-01T12:05:00Z"
        created_at:
          type: string
          format: date-time
          description: Timestamp when the reservation was created
          example: "2024-01-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the reservation was last updated
          example: "2024-01-01T12:00:00Z"

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          $ref: '#/components/schemas/ErrorDetail'

    ErrorDetail:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code identifier
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: Human-readable error message
          example: "Invalid request parameters"
        trace_id:
          type: string
          description: Trace ID for debugging
          example: "abc123-def456"

  responses:
    BadRequest:
      description: Bad Request - Invalid input parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "VALIDATION_ERROR"
              message: "Invalid request parameters"
              trace_id: "abc123-def456"

    Unauthorized:
      description: Unauthorized - Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "UNAUTHENTICATED"
              message: "Authentication is required to access this resource"
              trace_id: "abc123-def456"

    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "FORBIDDEN"
              message: "Access denied to this resource"
              trace_id: "abc123-def456"

    NotFound:
      description: Not Found - Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "VALIDATION_ERROR"
              message: "Reservation not found"
              trace_id: "abc123-def456"

    Conflict:
      description: Conflict - Resource state conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "INVENTORY_CONFLICT"
              message: "Seats not available"
              trace_id: "abc123-def456"

    PreconditionFailed:
      description: Precondition Failed - Payment approval failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "PAYMENT_NOT_APPROVED"
              message: "Payment approval failed"
              trace_id: "abc123-def456"

    RateLimited:
      description: Too Many Requests - Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "RATE_LIMITED"
              message: "Request rate limit exceeded"
              trace_id: "abc123-def456"

tags:
  - name: Reservations
    description: Reservation management operations
