# Production Configuration

# Server Configuration
server.port=8010

# Security (Production JWT)
spring.security.oauth2.resourceserver.jwt.issuer-uri=${JWT_ISSUER_URI:https://your-auth-server.com}
spring.security.oauth2.resourceserver.jwt.audiences=reservation-api

# AWS Configuration (Production)
# Note: Uses IRSA (IAM Roles for Service Accounts) in Kubernetes
# ServiceAccount annotation: eks.amazonaws.com/role-arn
aws.region=${AWS_REGION:ap-northeast-2}

# DynamoDB Tables (Production)
aws.dynamodb.table.reservations=${DYNAMODB_TABLE_RESERVATIONS:reservations}
aws.dynamodb.table.orders=${DYNAMODB_TABLE_ORDERS:orders}
aws.dynamodb.table.idempotency=${DYNAMODB_TABLE_IDEMPOTENCY:idempotency}
aws.dynamodb.table.outbox=${DYNAMODB_TABLE_OUTBOX:outbox}

# EventBridge (Production)
aws.eventbridge.bus-name=${EVENTBRIDGE_BUS_NAME:traffic-tacos-events}
aws.eventbridge.scheduler-group=${EVENTBRIDGE_SCHEDULER_GROUP:reservation-expiry}

# gRPC Client (Production)
grpc.client.inventory-service.address=${GRPC_INVENTORY_ADDRESS:static://inventory-service:8021}
grpc.client.inventory-service.negotiation-type=plaintext

# Logging (Production level)
logging.level.com.traffictacos.reservation=INFO
logging.level.io.grpc=WARN
logging.level.org.springframework.security=INFO

# Healthcheck
management.endpoint.health.probes.enabled=true
