# Application Configuration
spring.application.name=reservation-api

# WebFlux Configuration
spring.webflux.base-path=/v1

# Jackson Configuration (Performance Optimization)
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.deserialization.fail-on-unknown-properties=false

# AWS Configuration
aws.region=ap-northeast-2
aws.dynamodb.endpoint=${DYNAMODB_ENDPOINT:http://localhost:8000}
aws.eventbridge.endpoint=${EVENTBRIDGE_ENDPOINT:http://localhost:4566}

# DynamoDB Tables
app.dynamodb.tables.reservations=reservations
app.dynamodb.tables.orders=orders
app.dynamodb.tables.idempotency=idempotency
app.dynamodb.tables.outbox=outbox

# gRPC Configuration
grpc.client.inventory.address=${INVENTORY_GRPC_ADDRESS:localhost:9090}
grpc.client.inventory.negotiation-type=plaintext

# Security Configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=${JWT_ISSUER_URI:http://localhost:8080/auth/realms/traffic-tacos}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${JWT_JWK_SET_URI:http://localhost:8080/auth/realms/traffic-tacos/protocol/openid-connect/certs}

# Resilience4j Configuration
resilience4j.circuitbreaker.configs.default.registerHealthIndicator=true
resilience4j.circuitbreaker.configs.default.slidingWindowSize=10
resilience4j.circuitbreaker.configs.default.minimumNumberOfCalls=5
resilience4j.circuitbreaker.configs.default.failureRateThreshold=50
resilience4j.circuitbreaker.configs.default.waitDurationInOpenState=10000
resilience4j.circuitbreaker.configs.default.permittedNumberOfCallsInHalfOpenState=3

resilience4j.retry.configs.default.maxAttempts=3
resilience4j.retry.configs.default.waitDuration=1000
resilience4j.retry.configs.default.retryExceptions=java.net.ConnectException

resilience4j.timelimiter.configs.default.timeoutDuration=600ms
resilience4j.timelimiter.configs.default.cancelRunningFuture=true

# Observability Configuration
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=when-authorized
management.metrics.export.otlp.enabled=true
management.metrics.export.otlp.endpoint=${OTLP_ENDPOINT:http://localhost:4318/v1/metrics}
management.metrics.export.otlp.step=10s

# Logging Configuration
logging.level.com.traffictacos.reservation=INFO
logging.level.software.amazon.awssdk=INFO
logging.level.io.grpc=INFO
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n

# Business Logic Configuration
app.reservation.hold-duration-seconds=60
app.reservation.idempotency-ttl-seconds=300
app.reservation.max-retries=3

# Performance Configuration
server.tomcat.max-http-header-size=8192
server.tomcat.connection-timeout=20000
server.tomcat.keep-alive-timeout=20000
