# Application Configuration
spring.application.name=reservation-api
spring.profiles.active=local

# Server Configuration
server.port=8001
server.netty.connection-timeout=30s
server.netty.h2c-max-content-length=10MB

# Management/Actuator
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always
management.metrics.export.prometheus.enabled=true
management.tracing.sampling.probability=1.0

# Security
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://your-auth-server.com
spring.security.oauth2.resourceserver.jwt.audiences=reservation-api

# Resilience4j
resilience4j.circuitbreaker.instances.inventory-grpc.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.inventory-grpc.wait-duration-in-open-state=30s
resilience4j.timelimiter.instances.inventory-grpc.timeout-duration=250ms

# AWS Configuration
aws.region=ap-northeast-2
aws.profile=tacos

# DynamoDB Tables
aws.dynamodb.table.reservations=reservations
aws.dynamodb.table.orders=orders
aws.dynamodb.table.idempotency=idempotency
aws.dynamodb.table.outbox=outbox

# EventBridge
aws.eventbridge.bus-name=traffic-tacos-events
aws.eventbridge.scheduler-group=reservation-expiry

# gRPC Client
grpc.client.inventory-service.address=static://localhost:8002
grpc.client.inventory-service.negotiation-type=plaintext

# Logging
logging.level.com.traffictacos.reservation=DEBUG
logging.level.io.grpc=INFO
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n
